# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
from PyQt5.QtGui import QPixmap, QImage, qRgb
import time
import autopy
from PyQt5.QtWidgets import *
import sys
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import QGraphicsScene
from PyQt5.QtGui import QPainter
import algorithm as ag

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1680, 980)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(60, 70, 1200, 650))
        self.graphicsView.setObjectName("graphicsView")
        MainWindow.setCentralWidget(self.centralwidget)

        ########################       bar        ########################
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 882, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menumohu = QtWidgets.QMenu(self.menu_2)
        self.menumohu.setObjectName("menumohu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar)

        ########################      dock         ################################
        # 创建 QComboBox 和 QLabel，但将它们初始化为隐藏状态
        self.kernel_size_combo = QComboBox()
        self.kernel_size_combo.setVisible(False)

        self.kernel_size_label = QLabel("Kernel Size: 3x3")
        self.kernel_size_label.setVisible(False)

        self.dockWidget = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget.setObjectName("dockWidget")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")

        layout = QtWidgets.QVBoxLayout(self.dockWidgetContents)
        layout.addWidget(self.kernel_size_combo)
        layout.addWidget(self.kernel_size_label)

        self.dockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget)

        ####################           action              ###################################
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.actionsave = QtWidgets.QAction(MainWindow)
        self.actionsave.setObjectName("actionsave")
        self.actionmohu = QtWidgets.QAction(MainWindow)
        self.actionmohu.setObjectName("actionmohu")
        self.actionpinghua = QtWidgets.QAction(MainWindow)
        self.actionpinghua.setObjectName("actionpinghua")
        self.action_tool_mouse = QtWidgets.QAction(MainWindow)
        self.action_tool_mouse.setObjectName("action_tool_mouse")
        self.action_tool_gray = QtWidgets.QAction(MainWindow)
        self.action_tool_gray.setObjectName("action_tool_gray")
        self.action_tool_flip = QtWidgets.QAction(MainWindow)
        self.action_tool_flip.setObjectName("action_tool_flip")
        self.action_tool_back = QtWidgets.QAction(MainWindow)
        self.action_tool_back.setObjectName("action_tool_back")
        self.actiongaosi = QtWidgets.QAction(MainWindow)
        self.actiongaosi.setObjectName("actiongaosi")
        self.actionjunzhi = QtWidgets.QAction(MainWindow)
        self.actionjunzhi.setObjectName("actionjunzhi")
        self.menu.addAction(self.actionopen)
        self.menu.addAction(self.actionsave)
        self.menumohu.addAction(self.actiongaosi)
        self.menumohu.addAction(self.actionjunzhi)
        self.menu_2.addAction(self.menumohu.menuAction())
        self.menu_2.addAction(self.actionpinghua)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.toolBar.addAction(self.action_tool_mouse)
        self.toolBar.addAction(self.action_tool_gray)
        self.toolBar.addAction(self.action_tool_flip)
        self.toolBar.addAction(self.action_tool_back)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionopen.triggered.connect(self.open_img)
        self.action_tool_gray.triggered.connect(self.gray_img)
        self.action_tool_flip.triggered.connect(self.flip_img)
        self.action_tool_back.triggered.connect(self.back_img)
        self.actiongaosi.triggered.connect(self.gaosi)
        #图片存储
        self.image_history = []  # 用于保存图像历史记录
        self.current_image = None
        self.processed_image = None




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.menu_2.setTitle(_translate("MainWindow", "滤镜"))
        self.menumohu.setTitle(_translate("MainWindow", "模糊"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionopen.setText(_translate("MainWindow", "open"))
        self.actionsave.setText(_translate("MainWindow", "save"))
        self.actionmohu.setText(_translate("MainWindow", "mohu"))
        self.actionpinghua.setText(_translate("MainWindow", "pinghua"))
        self.action_tool_mouse.setText(_translate("MainWindow", "mouse"))
        self.action_tool_gray.setText(_translate("MainWindow", "灰度"))
        self.action_tool_flip.setText(_translate("MainWindow", "翻转"))
        self.action_tool_back.setText(_translate("MainWindow", "撤回"))
        self.actiongaosi.setText(_translate("MainWindow", "gaosi"))
        self.actionjunzhi.setText(_translate("MainWindow", "junzhi"))

    def update_img(self,img):
        # 更新当前图像
        self.current_image = img

        # 将处理后的图像保存到历史记录
        self.image_history.append(self.current_image.copy())

        pix = ag.matqimage(img)
        width = pix.width()
        height = pix.height()

        # 调整 QGraphicsView 的大小以适应图像大小
        self.graphicsView.setFixedSize(width, height)
        scene = QGraphicsScene(self.graphicsView)
        scene.setSceneRect(0, 0, width, height)
        scene.addPixmap(pix)
        self.graphicsView.setScene(scene)
        self.graphicsView.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)
    def open_img(self):
        fname = QFileDialog.getOpenFileName(None, '打开图片', './', "Images (*.png *.jpg *.bmp)")
        if fname[0]:
            pixmap = QPixmap(fname[0])
            width = pixmap.width()
            height = pixmap.height()
            # 调整 QGraphicsView 的大小以适应图像大小
            self.graphicsView.setFixedSize(width, height)
            scene = QGraphicsScene(self.graphicsView)
            scene.setSceneRect(0, 0, width, height)
            scene.addPixmap(pixmap)
            self.graphicsView.setScene(scene)
            self.graphicsView.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)
            self.current_image=ag.qimage2mat(pixmap)

    def back_img(self):
        # 撤回上一个图像处理操作
        if len(self.image_history) > 0:
            self.current_image = self.image_history[-2]  # 获取最后一个元素
            self.image_history.pop()  # 弹出最后一个元素
            pix = ag.matqimage(self.current_image)
            width = pix.width()
            height = pix.height()

            # 调整 QGraphicsView 的大小以适应图像大小
            self.graphicsView.setFixedSize(width, height)
            scene = QGraphicsScene(self.graphicsView)
            scene.setSceneRect(0, 0, width, height)
            scene.addPixmap(pix)
            self.graphicsView.setScene(scene)
            self.graphicsView.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)
        else:
            self.current_image = None

    def gaosi(self):
        # 在 def gaosi 中执行高斯滤波和其他操作
        # 设置 QComboBox 和 QLabel 的可见性为 True，以便它们在需要时显示
        # 添加选项
        self.kernel_size_combo.addItem("3x3")
        self.kernel_size_combo.addItem("5x5")
        self.kernel_size_combo.addItem("7x7")
        # 设置默认选项
        default_size = "5x5"  # 你可以将默认选项设置为你想要的值
        self.kernel_size_combo.setCurrentText(default_size)

        self.kernel_size_combo.setVisible(True)
        self.kernel_size_label.setVisible(True)
        # 连接信号和槽，当选择改变时调用 apply_gaussian_filter 函数
        self.kernel_size_combo.currentIndexChanged.connect(self.apply_gaussian_filter)

    def apply_gaussian_filter(self):
        selected_size = self.kernel_size_combo.currentText()
        kernel_size = int(selected_size.split("x")[0])
        print(kernel_size)

    def gray_img(self):
        if self.current_image is not None:
            # 进行灰度值处理

            gray_image = ag.gray_picture(self.current_image)
            # 更新当前图像
            self.update_img(gray_image)
        else:
            return

    def flip_img(self):
        if self.current_image is not None:
            # 进行灰度值处理
            flip_image = ag.flip_picture(self.current_image,0)
            # 更新当前图像
            self.update_img(flip_image)
        else:
            return

from PyQt5.QtWidgets import QApplication, QMainWindow
import sys
# ... 省略你的所有TableWidget子类的定义 ...
def main():
    # 创建Qt应用程序对象
    app = QApplication(sys.argv)

    # 创建主窗口
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()

    ui.setupUi(MainWindow)

    # 显示主窗口
    MainWindow.show()

    # 运行应用程序
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()

