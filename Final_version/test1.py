# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import HandTrackingModule as ht
from PyQt5.QtGui import QFont
import pytesseract
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
from PyQt5.QtGui import QPixmap, QImage, qRgb
import time
import autopy
from PyQt5.QtWidgets import *
import sys
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import QGraphicsScene
from PyQt5.QtGui import QPainter
import algorithm as ag
from PyQt5.QtCore import QRect
from functools import partial
from PyQt5.QtCore import Qt




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1900, 1080)

        MainWindow.setWindowTitle("PS")
        icon = QtGui.QIcon("picture/ICON.jpg")  # 将 "path_to_icon.png" 替换为你的图标文件路径
        MainWindow.setWindowIcon(icon)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(400, 100, 700, 800))
        self.graphicsView.setObjectName("graphicsView")
        MainWindow.setCentralWidget(self.centralwidget)

        ########################       bar        ########################
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 882, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_2_1 = QtWidgets.QMenu(self.menu_2)
        self.menu_2_1.setObjectName("menu_2_1")
        self.menu_2_2 = QtWidgets.QMenu(self.menu_2)
        self.menu_2_2.setObjectName("menu_2_2")
        self.menu_2_3 = QtWidgets.QMenu(self.menu_2)
        self.menu_2_3.setObjectName("menu_2_3")
        self.menu_2_4 = QtWidgets.QMenu(self.menu_2)
        self.menu_2_4.setObjectName("menu_2_4")
        self.menu_2_5 = QtWidgets.QMenu(self.menu_2)
        self.menu_2_5.setObjectName("menu_2_5")
        self.menu_2_6 = QtWidgets.QMenu(self.menu_2)
        self.menu_2_6.setObjectName("menu_2_6")
        self.menu_2_7 = QtWidgets.QMenu(self.menu_2)
        self.menu_2_7.setObjectName("menu_2_7")

        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_3_1 = QtWidgets.QMenu(self.menu_3)
        self.menu_3_1.setObjectName("menu_3_1")
        self.menu_3_2 = QtWidgets.QMenu(self.menu_3)
        self.menu_3_2.setObjectName("menu_3_2")
        self.menu_3_3 = QtWidgets.QMenu(self.menu_3)
        self.menu_3_3.setObjectName("menu_3_3")
        self.menu_3_4 = QtWidgets.QMenu(self.menu_3)
        self.menu_3_4.setObjectName("menu_3_4")
        self.menu_3_5 = QtWidgets.QMenu(self.menu_3)
        self.menu_3_5.setObjectName("menu_3_5")


        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.menu_4_1 = QtWidgets.QMenu(self.menu_4)
        self.menu_4_1.setObjectName("menu_4_1")


        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("menu_5")
        self.menu_5_1 = QtWidgets.QMenu(self.menu_5)
        self.menu_5_1.setObjectName("menu_5_1")
        self.menu_5_2 = QtWidgets.QMenu(self.menu_5)
        self.menu_5_2.setObjectName("menu_5_2")

        self.menu_6 = QtWidgets.QMenu(self.menubar)
        self.menu_6.setObjectName("menu_6")
        self.menu_6_1 = QtWidgets.QMenu(self.menu_6)
        self.menu_6_1.setObjectName("menu_6_1")
        self.menu_6_2 = QtWidgets.QMenu(self.menu_6)
        self.menu_6_2.setObjectName("menu_6_2")
        self.menu_6_3 = QtWidgets.QMenu(self.menu_6)
        self.menu_6_3.setObjectName("menu_6_3")
        self.menu_6_4 = QtWidgets.QMenu(self.menu_6)
        self.menu_6_4.setObjectName("menu_6_4")

        self.menu_7 = QtWidgets.QMenu(self.menubar)
        self.menu_7.setObjectName("menu_7")
        self.menu_7_1 = QtWidgets.QMenu(self.menu_7)
        self.menu_7_1.setObjectName("menu_7_1")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        self.toolBar.setFixedWidth(40)
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar)


        ########################      button       ################################



        ########################      dock         ################################

        #dock 1

        self.dockWidget_1 = QtWidgets.QDockWidget('画板', MainWindow)
        self.dockWidget_1.setObjectName("dockWidget_1")
        self.dockWidget_1.setMinimumWidth(300)
        self.dockWidgetContents_1 = QtWidgets.QWidget()

        self.dockWidgetContents_1.setObjectName("dockWidgetContents_1")
        button_width = 35
        button_height = 20

        self.stackbutton_1 = QPushButton('颜色', self.dockWidgetContents_1)
        self.stackbutton_1.move(10, 10)  # 设置按钮1的位置
        self.stackbutton_1.resize(button_width, button_height)
        self.stackbutton_1.setDefault(True)
        self.stackbutton_2 = QPushButton('色板', self.dockWidgetContents_1)
        self.stackbutton_2.move(45, 10)  # 设置按钮2的位置
        self.stackbutton_2.resize(button_width, button_height)

        self.stackbutton_3 = QPushButton('渐变', self.dockWidgetContents_1)
        self.stackbutton_3.move(80, 10)  # 设置按钮3的位置
        self.stackbutton_3.resize(button_width, button_height)

        self.stackedWidget1 = QtWidgets.QStackedWidget(self.dockWidgetContents_1)
        self.stackedWidget1.setGeometry(QtCore.QRect(0, 40, 500, 250))
        self.stackedWidget1.setObjectName("stackedWidget_1")
        self.page_1 = QtWidgets.QWidget()
        self.page_1.setObjectName("page_1")
        self.stackedWidget1.addWidget(self.page_1)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.stackedWidget1.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.stackedWidget1.addWidget(self.page_3)
        self.stackedWidget1.setCurrentIndex(0)
        self.stackbutton_1.clicked.connect(self.btn1_fun)
        self.stackbutton_2.clicked.connect(self.btn2_fun)
        self.stackbutton_3.clicked.connect(self.btn3_fun)

        # 在dockWidgetContents_1中添加一个QLabel并用图片填充
        self.label_circle = QLabel(self.page_1)
        pixmap_1 = QPixmap('color_2.png')

        pixmap_1 = pixmap_1.scaled(200, 220, QtCore.Qt.KeepAspectRatio)
        self.label_circle.setPixmap(pixmap_1)
        self.label_circle.setAlignment(QtCore.Qt.AlignCenter)
        self.label_circle.setGeometry(40, 0,200, 220)
        self.label_circle.mousePressEvent = self.get_pixmap_color


        # 在dockWidgetContents_1中添加一个QLabel并用图片填充
        self.label_color = QLabel(self.page_1)
        pixmap = QPixmap('color_1.png')

        pixmap = pixmap.scaled(25, 220, QtCore.Qt.KeepAspectRatio)
        self.label_color.setPixmap(pixmap)
        self.label_color.setAlignment(QtCore.Qt.AlignCenter)
        self.label_color.setGeometry(260, 0, 25, 220)
        self.label_color.mousePressEvent = self.get_pixmap_color

        self.label_example = QLabel(self.page_1)
        pixmap_2 = QPixmap('color_3.png')

        pixmap_2 = pixmap_2.scaled(40, 40, QtCore.Qt.KeepAspectRatio)
        self.label_example.setPixmap(pixmap_2)
        self.label_example.setAlignment(QtCore.Qt.AlignCenter)
        self.label_example.setGeometry(0, 0, 40, 40)
        self.label_example.mousePressEvent = self.get_pixmap_color

        self.dockWidget_1.setWidget(self.dockWidgetContents_1)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget_1)


        #################right dock2
        self.dockWidget2 = QtWidgets.QDockWidget('属性', MainWindow)
        self.dockWidget2.setObjectName("dockWidget2")
        self.dockWidget2.setMinimumWidth(300)
        self.dockWidgetContents2 = QtWidgets.QWidget()
        font = QFont()
        font.setPointSize(12)
        self.dockWidgetContents2.setObjectName("dockWidgetContents2")
        self.label_dock2_size=QtWidgets.QLabel("尺寸：", self.dockWidgetContents2)
        self.label_dock2_size.setGeometry(40, 0, 60, 50)
        self.label_dock2_location = QtWidgets.QLabel("位置：", self.dockWidgetContents2)
        self.label_dock2_location.setGeometry(40, 50, 60, 50)
        self.label_dock2_Location = QtWidgets.QLabel("px", self.dockWidgetContents2)
        self.label_dock2_Location.setGeometry(120, 50, 160, 50)
        #self.label_dock2_Size.QLabel("尺寸:", self.dockWidgetContents2)
        self.label_dock2_Size = QtWidgets.QLabel(" px ", self.dockWidgetContents2)
        self.label_dock2_Size.setGeometry(120, 0, 100, 50)

        self.label_dock2_size.setFont(font)
        self.label_dock2_Size.setFont(font)
        self.label_dock2_location.setFont(font)
        self.label_dock2_Location.setFont(font)
        self.dockWidget2.setWidget(self.dockWidgetContents2)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget2)


        #dock 2


        self.dockWidget = QtWidgets.QDockWidget('滤波属性', MainWindow)
        self.dockWidget.setObjectName("dockWidget")

        self.dockWidget.setMinimumWidth(280)
        self.dockWidget.setMaximumHeight(150)  # 设置最大高度
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")

        #spin box
        self.kernel_size_spin = QSpinBox(self.dockWidgetContents)
        self.kernel_size_spin.setVisible(False)
        self.kernel_size_spin.setGeometry(10, 50, 100, 30)  # 设置SpinBox的位置和大小
        self.kernel_size_spin.setStyleSheet("background-color: #282828;\n"
                                            "color: #FFFFFF; /* 文本颜色 */")
        #combo box
        self.kernel_size_combo = QComboBox(self.dockWidgetContents)
        self.kernel_size_combo.setVisible(False)

        self.kernel_size_label = QLabel("Kernel Size: 3x3", self.dockWidgetContents)
        self.kernel_size_label.setVisible(False)

        self.kernel_size_combo.setGeometry(10, 50, 100, 30)  # 设置位置和大小
        self.kernel_size_label.setGeometry(10, 10, 150, 30)  # 设置位置和大小

        self.dockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget)
        self.dockWidget.setVisible(False)



        # dock 3
        self.dockWidget_3 = QtWidgets.QDockWidget('均衡属性', MainWindow)
        self.dockWidget_3.setObjectName("dockWidget")

        self.dockWidget_3.setMinimumWidth(300)
        self.dockWidgetContents_3 = QtWidgets.QWidget()
        self.dockWidgetContents_3.setObjectName("dockWidgetContents_3")
        # 创建三个复选框
        self.dock3_checkbox1 = QtWidgets.QCheckBox('R通道', self.dockWidgetContents_3)
        self.dock3_checkbox2 = QtWidgets.QCheckBox('G通道', self.dockWidgetContents_3)
        self.dock3_checkbox3 = QtWidgets.QCheckBox('B通道', self.dockWidgetContents_3)
        self.dock3_label1 = QtWidgets.QLabel('R通道', self.dockWidgetContents_3)
        self.dock3_label2 = QtWidgets.QLabel('G通道', self.dockWidgetContents_3)
        self.dock3_label3 = QtWidgets.QLabel('B通道', self.dockWidgetContents_3)
        # 设置复选框的位置
        self.dock3_checkbox1.setGeometry(170, 10, 160, 30)  # 位置和大小
        self.dock3_checkbox2.setGeometry(170, 50, 160, 30)
        self.dock3_checkbox3.setGeometry(170, 90, 160, 30)
        # 设置标签和复选框的位置
        self.dock3_label1.setGeometry(10, 10, 150, 30)
        self.dock3_label2.setGeometry(10, 50, 150, 30)
        self.dock3_label3.setGeometry(10, 90, 150, 30)
        self.dock3_label1.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock3_label2.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock3_label3.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dockWidget_3.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_3)
        self.dockWidget_3.setVisible(False)
        self.dockWidget_3.setMinimumWidth(280)
        self.dockWidget_3.setMaximumHeight(180)



        #dock 4
        self.dockWidget_4 = QtWidgets.QDockWidget('形态属性', MainWindow)
        self.dockWidget_4.setObjectName("dockWidget_4")
        self.dockWidget_4.setMinimumWidth(280)
        self.dockWidget_4.setMaximumHeight(200)  # 设置最大高度
        self.dockWidgetContents_4 = QtWidgets.QWidget()
        self.dockWidgetContents_4.setObjectName("dockWidgetContents_4")

        # spin box
        self.dock4_spin = QSpinBox(self.dockWidgetContents_4)

        self.dock4_spin.setGeometry(10, 10, 160, 30)  # 设置SpinBox的位置和大小
        self.dock4_spin.setStyleSheet("background-color: #282828;\n"
                                            "color: #FFFFFF; /* 文本颜色 */")
        # combo box
        self.dock4_combo = QComboBox(self.dockWidgetContents_4)
        self.dock4_combo.setGeometry(10, 50, 160, 30)  # 设置位置和大小
        self.dock4_combo.addItem("椭圆形")
        self.dock4_combo.addItem("十字形")
        self.dock4_combo.addItem("方形")
        self.dock4_spin.setMinimum(1)
        self.dock4_spin.setMaximum(30)
        self.dock4_spin.setSingleStep(2)
        self.dock4_spin.setValue(1)

        self.dockWidget_4.setWidget(self.dockWidgetContents_4)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_4)
        self.dockWidget_4.setVisible(False)


        #dock5
        self.dockWidget_5 = QtWidgets.QDockWidget('梯度属性', MainWindow)
        self.dockWidget_5.setObjectName("dockWidget_5")
        self.dockWidget_5.setMinimumWidth(280)
        self.dockWidget_5.setMaximumHeight(200)  # 设置最大高度
        self.dockWidgetContents_5 = QtWidgets.QWidget()
        self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")

        # spin box
        self.dock5_spin = QSpinBox(self.dockWidgetContents_5)

        self.dock5_spin.setGeometry(10, 10, 160, 30)  # 设置SpinBox的位置和大小
        self.dock5_spin.setStyleSheet("background-color: #282828;\n"
                                      "color: #FFFFFF; /* 文本颜色 */")

        self.dock5_checkbox1 = QtWidgets.QCheckBox('X方向', self.dockWidgetContents_5)
        self.dock5_checkbox2 = QtWidgets.QCheckBox('Y方向', self.dockWidgetContents_5)

        self.dock5_label1 = QtWidgets.QLabel('X方向', self.dockWidgetContents_5)
        self.dock5_label2 = QtWidgets.QLabel('Y方向', self.dockWidgetContents_5)
        # 设置复选框的位置
        self.dock5_checkbox1.setGeometry(170, 50, 160, 30)  # 位置和大小
        self.dock5_checkbox2.setGeometry(170, 90, 160, 30)
        # 设置标签和复选框的位置
        self.dock5_label1.setGeometry(10, 50, 150, 30)
        self.dock5_label2.setGeometry(10, 90, 150, 30)
        self.dock5_label1.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock5_label2.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock5_spin.setMinimum(1)
        self.dock5_spin.setMaximum(30)
        self.dock5_spin.setSingleStep(2)
        self.dock5_spin.setValue(1)

        self.dockWidget_5.setWidget(self.dockWidgetContents_5)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_5)
        self.dockWidget_5.setVisible(False)



        #dock 6
        self.dockWidget_6 = QtWidgets.QDockWidget('阈值属性', MainWindow)
        self.dockWidget_6.setObjectName("dockWidget_6")
        self.dockWidget_6.setMinimumWidth(280)
        self.dockWidget_6.setMaximumHeight(130)  # 设置最大高度
        self.dockWidgetContents_6 = QtWidgets.QWidget()
        self.dockWidgetContents_6.setObjectName("dockWidgetContents_6")

        # spin box
        self.dock6_spin = QSpinBox(self.dockWidgetContents_6)

        self.dock6_spin.setGeometry(120, 10, 130, 30)  # 设置SpinBox的位置和大小
        self.dock6_spin.setStyleSheet("background-color: #282828;\n"
                                      "color: #FFFFFF; /* 文本颜色 */")
        self.dock6_spin2 = QSpinBox(self.dockWidgetContents_6)

        self.dock6_spin2.setGeometry(120, 50, 130, 30)  # 设置SpinBox的位置和大小
        self.dock6_spin2.setStyleSheet("background-color: #282828;\n"
                                      "color: #FFFFFF; /* 文本颜色 */")

        self.dock6_label1 = QtWidgets.QLabel('阈值', self.dockWidgetContents_6)
        self.dock6_label2 = QtWidgets.QLabel('最大值', self.dockWidgetContents_6)

        # 设置标签和复选框的位置
        self.dock6_label1.setGeometry(10, 10, 100, 30)
        self.dock6_label2.setGeometry(10, 50, 100, 30)
        self.dock6_label1.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock6_label2.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock6_spin.setMinimum(0)
        self.dock6_spin.setMaximum(255)
        self.dock6_spin.setSingleStep(1)
        self.dock6_spin.setValue(125)
        self.dock6_spin2.setMinimum(0)
        self.dock6_spin2.setMaximum(255)
        self.dock6_spin2.setSingleStep(1)
        self.dock6_spin2.setValue(255)

        self.dockWidget_6.setWidget(self.dockWidgetContents_6)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_6)
        self.dockWidget_6.setVisible(False)


        # dock 7
        self.dockWidget_7 = QtWidgets.QDockWidget('边缘阈值', MainWindow)
        self.dockWidget_7.setObjectName("dockWidget_7")
        self.dockWidget_7.setMinimumWidth(280)
        self.dockWidget_7.setMaximumHeight(130)  # 设置最大高度
        self.dockWidgetContents_7 = QtWidgets.QWidget()
        self.dockWidgetContents_7.setObjectName("dockWidgetContents_7")

        # spin box
        self.dock7_spin = QSpinBox(self.dockWidgetContents_7)

        self.dock7_spin.setGeometry(120, 10, 130, 30)  # 设置SpinBox的位置和大小
        self.dock7_spin.setStyleSheet("background-color: #282828;\n"
                                      "color: #FFFFFF; /* 文本颜色 */")
        self.dock7_spin2 = QSpinBox(self.dockWidgetContents_7)

        self.dock7_spin2.setGeometry(120, 50, 130, 30)  # 设置SpinBox的位置和大小
        self.dock7_spin2.setStyleSheet("background-color: #282828;\n"
                                       "color: #FFFFFF; /* 文本颜色 */")

        self.dock7_label1 = QtWidgets.QLabel('阈值', self.dockWidgetContents_7)
        self.dock7_label2 = QtWidgets.QLabel('最大值', self.dockWidgetContents_7)

        # 设置标签和复选框的位置
        self.dock7_label1.setGeometry(10, 10, 100, 30)
        self.dock7_label2.setGeometry(10, 50, 100, 30)
        self.dock7_label1.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock7_label2.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock7_spin.setMinimum(0)
        self.dock7_spin.setMaximum(50)
        self.dock7_spin.setSingleStep(1)
        self.dock7_spin.setValue(15)
        self.dock7_spin2.setMinimum(0)
        self.dock7_spin2.setMaximum(200)
        self.dock7_spin2.setSingleStep(1)
        self.dock7_spin2.setValue(100)

        self.dockWidget_7.setWidget(self.dockWidgetContents_7)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_7)
        self.dockWidget_7.setVisible(False)

        # dock 8
        self.dockWidget_8 = QtWidgets.QDockWidget('边界属性', MainWindow)
        self.dockWidget_8.setObjectName("dockWidget_8")
        self.dockWidget_8.setMinimumWidth(280)
        self.dockWidget_8.setMaximumHeight(130)  # 设置最大高度
        self.dockWidgetContents_8 = QtWidgets.QWidget()
        self.dockWidgetContents_8.setObjectName("dockWidgetContents_8")

        # spin box
        self.dock8_spin = QSpinBox(self.dockWidgetContents_8)

        self.dock8_spin.setGeometry(120, 10, 130, 30)  # 设置SpinBox的位置和大小
        self.dock8_spin.setStyleSheet("background-color: #282828;\n"
                                      "color: #FFFFFF; /* 文本颜色 */")
        self.dock8_spin2 = QSpinBox(self.dockWidgetContents_8)

        self.dock8_spin2.setGeometry(120, 50, 130, 30)  # 设置SpinBox的位置和大小
        self.dock8_spin2.setStyleSheet("background-color: #282828;\n"
                                       "color: #FFFFFF; /* 文本颜色 */")

        self.dock8_label1 = QtWidgets.QLabel('轮廓近似', self.dockWidgetContents_8)
        self.dock8_label2 = QtWidgets.QLabel('边界模式', self.dockWidgetContents_8)

        # 设置标签和复选框的位置
        self.dock8_label1.setGeometry(10, 10, 100, 30)
        self.dock8_label2.setGeometry(10, 50, 100, 30)
        self.dock8_label1.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock8_label2.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")
        self.dock8_spin.setMinimum(0)
        self.dock8_spin.setMaximum(50)
        self.dock8_spin.setSingleStep(1)
        self.dock8_spin.setValue(15)
        self.dock8_spin2.setMinimum(0)
        self.dock8_spin2.setMaximum(200)
        self.dock8_spin2.setSingleStep(1)
        self.dock8_spin2.setValue(100)

        self.dockWidget_8.setWidget(self.dockWidgetContents_8)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_8)
        self.dockWidget_8.setVisible(False)

        # dock 9
        self.dockWidget_9 = QtWidgets.QDockWidget('文字属性', MainWindow)
        self.dockWidget_9.setObjectName("dockWidget_9")
        self.dockWidget_9.setMinimumWidth(280)
        self.dockWidget_9.setMaximumHeight(130)  # 设置最大高度
        self.dockWidgetContents_9 = QtWidgets.QWidget()
        self.dockWidgetContents_9.setObjectName("dockWidgetContents_9")

        self.dock9_text= QTextEdit(self.dockWidgetContents_9)
        self.dock9_text.setGeometry(130, 10, 130, 30)  # 设置SpinBox的位置和大小
        self.dock9_text.setStyleSheet("background-color: #282828;\n"
                                      "color: #FFFFFF; /* 文本颜色 */")

        self.dock9_label1 = QtWidgets.QLabel('输入文字', self.dockWidgetContents_9)
        self.dock9_button1= QtWidgets.QPushButton('确认',self.dockWidgetContents_9)
        self.dock9_button1.setStyleSheet("background-color: #282828;\n"
                                      "color: #FFFFFF; /* 文本颜色 */")
        self.dock9_button1.setGeometry(130, 50, 130, 30)

        # 设置标签和复选框的位置
        self.dock9_label1.setGeometry(10, 10, 100, 30)
        self.dock9_label1.setStyleSheet("QLabel { background-color: #282828; color: #FFFFFF; }")

        self.dockWidget_9.setWidget(self.dockWidgetContents_9)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_9)
        self.dockWidget_9.setVisible(False)

        ####################           action              ###################################
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.actionsave = QtWidgets.QAction(MainWindow)
        self.actionsave.setObjectName("actionsave")
        self.action_2_1 = QtWidgets.QAction(MainWindow)
        self.action_2_1.setObjectName("action_2_1")
        self.action_2_2 = QtWidgets.QAction(MainWindow)
        self.action_2_2.setObjectName("action_2_2")


        self.action_tool_mouse = QtWidgets.QAction(MainWindow)
        icon_mouse = QtGui.QIcon()
        icon_mouse.addPixmap(QtGui.QPixmap("src/mouse3.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_mouse.setIcon(icon_mouse)
        self.action_tool_mouse.setObjectName("action_tool_mouse")

        self.action_tool_bigger = QtWidgets.QAction(MainWindow)
        icon_bigger = QtGui.QIcon()
        icon_bigger.addPixmap(QtGui.QPixmap("src/bigger.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_bigger.setIcon(icon_bigger)
        self.action_tool_bigger.setObjectName("action_tool_bigger")

        self.action_tool_smaller = QtWidgets.QAction(MainWindow)
        icon_smaller = QtGui.QIcon()
        icon_smaller.addPixmap(QtGui.QPixmap("src/smaller.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_smaller.setIcon(icon_smaller)
        self.action_tool_smaller.setObjectName("action_tool_smaller")

        self.action_tool_big = QtWidgets.QAction(MainWindow)
        icon_big = QtGui.QIcon()
        icon_big.addPixmap(QtGui.QPixmap("src/big.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_big.setIcon(icon_big)
        self.action_tool_big.setObjectName("action_tool_big")

        self.action_tool_small = QtWidgets.QAction(MainWindow)
        icon_small = QtGui.QIcon()
        icon_small.addPixmap(QtGui.QPixmap("src/small.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_small.setIcon(icon_small)
        self.action_tool_small.setObjectName("action_tool_small")

        self.action_tool_paint = QtWidgets.QAction(MainWindow)
        icon_paint = QtGui.QIcon()
        icon_paint.addPixmap(QtGui.QPixmap("src/paint.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_paint.setIcon(icon_paint)
        self.action_tool_paint.setObjectName("action_tool_paint")

        self.action_tool_text = QtWidgets.QAction(MainWindow)
        icon_text = QtGui.QIcon()
        icon_text.addPixmap(QtGui.QPixmap("src/text.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_text.setIcon(icon_text)
        self.action_tool_text.setObjectName("action_tool_text")

        self.action_tool_ctext = QtWidgets.QAction(MainWindow)
        icon_ctext = QtGui.QIcon()
        icon_ctext.addPixmap(QtGui.QPixmap("src/ctext.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_ctext.setIcon(icon_ctext)
        self.action_tool_ctext.setObjectName("action_tool_ctext")

        self.action_tool_mask = QtWidgets.QAction(MainWindow)
        icon_mask = QtGui.QIcon()
        icon_mask.addPixmap(QtGui.QPixmap("src/mask.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_mask.setIcon(icon_mask)
        self.action_tool_mask.setObjectName("action_tool_mask")

        self.action_tool_knife = QtWidgets.QAction(MainWindow)
        icon_knife = QtGui.QIcon()
        icon_knife.addPixmap(QtGui.QPixmap("src/knife.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_knife.setIcon(icon_knife)
        self.action_tool_knife.setObjectName("action_tool_knife")

        self.action_tool_flip_l = QtWidgets.QAction(MainWindow)
        icon_flip_l = QtGui.QIcon()
        icon_flip_l.addPixmap(QtGui.QPixmap("src/flip_l.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_flip_l.setIcon(icon_flip_l)
        self.action_tool_flip_l.setObjectName("action_tool_flip_l")

        self.action_tool_flip_r = QtWidgets.QAction(MainWindow)
        icon_flip_r = QtGui.QIcon()
        icon_flip_r.addPixmap(QtGui.QPixmap("src/flip_r.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_flip_r.setIcon(icon_flip_r)
        self.action_tool_flip_r.setObjectName("action_tool_flip_r")

        self.action_tool_vignette = QtWidgets.QAction(MainWindow)
        icon_vignette = QtGui.QIcon()
        icon_vignette.addPixmap(QtGui.QPixmap("src/vignette.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_vignette.setIcon(icon_vignette)
        self.action_tool_vignette.setObjectName("action_tool_vignette")

        self.action_tool_affine = QtWidgets.QAction(MainWindow)
        icon_affine = QtGui.QIcon()
        icon_affine.addPixmap(QtGui.QPixmap("src/affine.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_tool_affine.setIcon(icon_affine)
        self.action_tool_affine.setObjectName("action_tool_affine")

        #toolbar 信号槽
        self.action_tool_mouse.triggered.connect(self.toggleMove)
        self.action_tool_bigger.triggered.connect(self.zoomIn)
        self.action_tool_smaller.triggered.connect(self.zoomOut)
        self.action_tool_big.triggered.connect(self.big)
        self.action_tool_small.triggered.connect(self.small)
        self.action_tool_paint.triggered.connect(self.draw)
        self.action_tool_text.triggered.connect(self.text)
        self.action_tool_ctext.triggered.connect(self.ctext)
        self.action_tool_mask.triggered.connect(self.mask)
        self.action_tool_knife.triggered.connect(self.knife)
        self.action_tool_flip_l.triggered.connect(self.flip_l)
        self.action_tool_flip_r.triggered.connect(self.flip_r)
        self.action_tool_vignette.triggered.connect(self.vignette)
        self.action_tool_affine.triggered.connect(self.mouse_affine)
        self.action_tool_gray = QtWidgets.QAction(MainWindow)
        self.action_tool_gray.setObjectName("action_tool_gray")

        self.action_tool_back = QtWidgets.QAction(MainWindow)
        self.action_tool_back.setObjectName("action_tool_back")
        self.action_2_1_1 = QtWidgets.QAction(MainWindow)
        self.action_2_1_1.setObjectName("action_2_1_1")
        self.action_2_1_2 = QtWidgets.QAction(MainWindow)
        self.action_2_1_2.setObjectName("action_2_1_2")
        self.action_2_1_3 = QtWidgets.QAction(MainWindow)
        self.action_2_1_3.setObjectName("action_2_1_3")
        self.action_2_2_1 = QtWidgets.QAction(MainWindow)
        self.action_2_2_1.setObjectName("action_2_2_1")
        self.action_2_2_2 = QtWidgets.QAction(MainWindow)
        self.action_2_2_2.setObjectName("action_2_2_2")
        self.action_2_2_3 = QtWidgets.QAction(MainWindow)
        self.action_2_2_3.setObjectName("action_2_2_3")
        self.actioncomboclear = QtWidgets.QAction(MainWindow)
        self.actioncomboclear.setObjectName("actioncc")
        self.action_2_3_1 = QtWidgets.QAction(MainWindow)
        self.action_2_3_1.setObjectName("action_2_3_1")
        self.action_2_3_2 = QtWidgets.QAction(MainWindow)
        self.action_2_3_2.setObjectName("action_2_3_2")
        self.action_2_3_3 = QtWidgets.QAction(MainWindow)
        self.action_2_3_3.setObjectName("action_2_3_3")
        self.action_2_3_4 = QtWidgets.QAction(MainWindow)
        self.action_2_3_4.setObjectName("action_2_3_4")
        self.action_2_3_5 = QtWidgets.QAction(MainWindow)
        self.action_2_3_5.setObjectName("action_2_3_5")
        self.action_2_3_6 = QtWidgets.QAction(MainWindow)
        self.action_2_3_6.setObjectName("action_2_3_6")
        self.action_2_3_7 = QtWidgets.QAction(MainWindow)
        self.action_2_3_7.setObjectName("action_2_3_7")
        self.action_2_4_1 = QtWidgets.QAction(MainWindow)
        self.action_2_4_1.setObjectName("action_2_4_1")
        self.action_2_4_2 = QtWidgets.QAction(MainWindow)
        self.action_2_4_2.setObjectName("action_2_4_2")
        self.action_2_4_3 = QtWidgets.QAction(MainWindow)
        self.action_2_4_3.setObjectName("action_2_4_3")
        self.action_2_5_1 = QtWidgets.QAction(MainWindow)
        self.action_2_5_1.setObjectName("action_2_5_1")
        self.action_2_5_2 = QtWidgets.QAction(MainWindow)
        self.action_2_5_2.setObjectName("action_2_5_2")
        self.action_2_5_3 = QtWidgets.QAction(MainWindow)
        self.action_2_5_3.setObjectName("action_2_5_3")
        self.action_2_5_4 = QtWidgets.QAction(MainWindow)
        self.action_2_5_4.setObjectName("action_2_5_4")
        self.action_2_5_5 = QtWidgets.QAction(MainWindow)
        self.action_2_5_5.setObjectName("action_2_5_5")
        self.action_2_5_6 = QtWidgets.QAction(MainWindow)
        self.action_2_5_6.setObjectName("action_2_5_6")
        self.action_2_6_1 = QtWidgets.QAction(MainWindow)
        self.action_2_6_1.setObjectName("action_2_6_1")
        self.action_2_7_1 = QtWidgets.QAction(MainWindow)
        self.action_2_7_1.setObjectName("action_2_7_1")
        self.action_2_7_2 = QtWidgets.QAction(MainWindow)
        self.action_2_7_2.setObjectName("action_2_7_2")
        self.action_2_7_3 = QtWidgets.QAction(MainWindow)
        self.action_2_7_3.setObjectName("action_2_7_3")
        self.action_2_7_4 = QtWidgets.QAction(MainWindow)
        self.action_2_7_4.setObjectName("action_2_7_4")

        self.action_3_1_1 = QtWidgets.QAction(MainWindow)
        self.action_3_1_1.setObjectName("action_3_1_1")
        self.action_3_1_2 = QtWidgets.QAction(MainWindow)
        self.action_3_1_2.setObjectName("action_3_1_2")
        self.action_3_2_1 = QtWidgets.QAction(MainWindow)
        self.action_3_2_1.setObjectName("action_3_2_1")
        self.action_3_2_2 = QtWidgets.QAction(MainWindow)
        self.action_3_2_2.setObjectName("action_3_2_2")
        self.action_3_3_1 = QtWidgets.QAction(MainWindow)
        self.action_3_3_1.setObjectName("action_3_3_1")
        self.action_3_4_1 = QtWidgets.QAction(MainWindow)
        self.action_3_4_1.setObjectName("action_3_4_1")
        self.action_3_5_1 = QtWidgets.QAction(MainWindow)
        self.action_3_5_1.setObjectName("action_3_5_1")
        self.action_4_1_1 = QtWidgets.QAction(MainWindow)
        self.action_4_1_1.setObjectName("action_4_1_1")
        self.action_5_1_1 = QtWidgets.QAction(MainWindow)
        self.action_5_1_1.setObjectName("action_5_1_1")
        self.action_5_1_2 = QtWidgets.QAction(MainWindow)
        self.action_5_1_2.setObjectName("action_5_1_2")
        self.action_5_2_1 = QtWidgets.QAction(MainWindow)
        self.action_5_2_1.setObjectName("action_5_2_1")
        self.action_5_2_2 = QtWidgets.QAction(MainWindow)
        self.action_5_2_2.setObjectName("action_5_2_2")

        self.action_6_1_1 = QtWidgets.QAction(MainWindow)
        self.action_6_1_1.setObjectName("action_6_1_1")
        self.action_6_2_1 = QtWidgets.QAction(MainWindow)
        self.action_6_2_1.setObjectName("action_6_3_1")
        self.action_6_3_1 = QtWidgets.QAction(MainWindow)
        self.action_6_3_1.setObjectName("action_6_3_1")
        self.action_6_4_1 = QtWidgets.QAction(MainWindow)
        self.action_6_4_1.setObjectName("action_6_4_1")

        self.action_7_1_1 = QtWidgets.QAction(MainWindow)
        self.action_7_1_1.setObjectName("action_7_1_1")
        self.action_7_1_2 = QtWidgets.QAction(MainWindow)
        self.action_7_1_2.setObjectName("action_7_1_2")

        self.menu.addAction(self.actionopen)
        self.menu.addAction(self.actionsave)
        self.menu_2_1.addAction(self.action_2_1_1)
        self.menu_2_1.addAction(self.action_2_1_2)
        self.menu_2_1.addAction(self.action_2_1_3)
        self.menu_2_1.addAction(self.actioncomboclear)
        self.menu_2_2.addAction(self.action_2_2_1)
        self.menu_2_2.addAction(self.action_2_2_2)
        self.menu_2_2.addAction(self.action_2_2_3)
        self.menu_2_3.addAction(self.action_2_3_1)
        self.menu_2_3.addAction(self.action_2_3_2)
        self.menu_2_3.addAction(self.action_2_3_3)
        self.menu_2_3.addAction(self.action_2_3_4)
        self.menu_2_3.addAction(self.action_2_3_5)

        self.menu_2_3.addAction(self.action_2_3_6)
        self.menu_2_3.addAction(self.action_2_3_7)
        self.menu_2_4.addAction(self.action_2_4_1)
        self.menu_2_4.addAction(self.action_2_4_2)
        self.menu_2_4.addAction(self.action_2_4_3)
        self.menu_2_5.addAction(self.action_2_5_1)
        self.menu_2_5.addAction(self.action_2_5_2)
        self.menu_2_5.addAction(self.action_2_5_3)
        self.menu_2_5.addAction(self.action_2_5_4)
        self.menu_2_5.addAction(self.action_2_5_5)
        self.menu_2_5.addAction(self.action_2_5_6)
        self.menu_2_6.addAction(self.action_2_6_1)
        self.menu_2_7.addAction(self.action_2_7_1)
        self.menu_2_7.addAction(self.action_2_7_2)
        self.menu_2_7.addAction(self.action_2_7_3)
        self.menu_2_7.addAction(self.action_2_7_4)
        self.menu_3_1.addAction(self.action_3_1_1)
        self.menu_3_1.addAction(self.action_3_1_2)
        self.menu_3_2.addAction(self.action_3_2_1)
        self.menu_3_2.addAction(self.action_3_2_2)
        self.menu_3_2.addAction(self.action_3_2_1)
        self.menu_3_3.addAction(self.action_3_3_1)
        self.menu_3_4.addAction(self.action_3_4_1)
        self.menu_3_5.addAction(self.action_3_5_1)
        self.menu_4_1.addAction(self.action_4_1_1)
        self.menu_5_1.addAction(self.action_5_1_1)
        self.menu_5_1.addAction(self.action_5_1_2)
        self.menu_5_2.addAction(self.action_5_2_1)
        self.menu_5_2.addAction(self.action_5_2_2)
        self.menu_6_1.addAction(self.action_6_1_1)
        self.menu_6_2.addAction(self.action_6_2_1)
        self.menu_7_1.addAction(self.action_7_1_1)
        self.menu_7_1.addAction(self.action_7_1_2)
        self.menu_6_3.addAction(self.action_6_3_1)
        self.menu_6_4.addAction(self.action_6_4_1)
        self.menu_2.addAction(self.menu_2_1.menuAction())
        self.menu_2.addAction(self.menu_2_2.menuAction())
        self.menu_2.addAction(self.menu_2_3.menuAction())
        self.menu_2.addAction(self.menu_2_4.menuAction())
        self.menu_2.addAction(self.menu_2_5.menuAction())
        self.menu_2.addAction(self.menu_2_6.menuAction())
        self.menu_2.addAction(self.menu_2_7.menuAction())

        self.menu_3.addAction(self.menu_3_1.menuAction())
        self.menu_3.addAction(self.menu_3_2.menuAction())
        self.menu_3.addAction(self.menu_3_3.menuAction())
        self.menu_3.addAction(self.menu_3_4.menuAction())
        self.menu_3.addAction(self.menu_3_5.menuAction())

        self.menu_4.addAction(self.menu_4_1.menuAction())
        self.menu_5.addAction(self.menu_5_1.menuAction())
        self.menu_5.addAction(self.menu_5_2.menuAction())
        self.menu_6.addAction(self.menu_6_1.menuAction())
        self.menu_6.addAction(self.menu_6_2.menuAction())
        self.menu_6.addAction(self.menu_6_3.menuAction())
        self.menu_6.addAction(self.menu_6_4.menuAction())
        self.menu_7.addAction(self.menu_7_1.menuAction())

        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())
        self.menubar.addAction(self.menu_6.menuAction())
        self.menubar.addAction(self.menu_7.menuAction())
        self.toolBar.addAction(self.action_tool_mouse)
        self.toolBar.addAction(self.action_tool_bigger)
        self.toolBar.addAction(self.action_tool_smaller)
        self.toolBar.addAction(self.action_tool_big)
        self.toolBar.addAction(self.action_tool_small)
        self.toolBar.addAction(self.action_tool_paint)
        self.toolBar.addAction(self.action_tool_text)
        self.toolBar.addAction(self.action_tool_ctext)
        self.toolBar.addAction(self.action_tool_knife)
        self.toolBar.addAction(self.action_tool_flip_l)
        self.toolBar.addAction(self.action_tool_flip_r)
        self.toolBar.addAction(self.action_tool_vignette)
        self.toolBar.addAction(self.action_tool_affine)
        self.toolBar.addAction(self.action_tool_mask)
        self.toolBar.addAction(self.action_tool_gray)

        self.toolBar.addAction(self.action_tool_back)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionopen.triggered.connect(self.open_img)
        self.actionsave.triggered.connect(self.saveimage)
        self.action_tool_gray.triggered.connect(self.VR)
        self.action_tool_back.triggered.connect(self.back_img)


        self.action_2_1_1.triggered.connect(partial(self.Filter_blur, 'Gaussian'))
        self.action_2_1_2.triggered.connect(partial(self.Filter_blur, 'mean'))
        self.action_2_1_3.triggered.connect(partial(self.Filter_blur, 'median'))
        self.action_2_2_1.triggered.connect(partial(self.Equalize,'R'))
        self.action_2_2_2.triggered.connect(partial(self.Equalize,'G'))
        self.action_2_2_3.triggered.connect(partial(self.Equalize,'B'))
        self.action_2_3_1.triggered.connect(partial(self.Morph,'腐蚀'))
        self.action_2_3_2.triggered.connect(partial(self.Morph,'膨胀'))
        self.action_2_3_3.triggered.connect(partial(self.Morph,'开'))
        self.action_2_3_4.triggered.connect(partial(self.Morph,'闭'))
        self.action_2_3_5.triggered.connect(partial(self.Morph,'梯度'))
        self.action_2_3_6.triggered.connect(partial(self.Morph,'顶帽'))
        self.action_2_3_7.triggered.connect(partial(self.Morph,'黑帽'))
        self.action_2_4_1.triggered.connect(partial(self.Grad,'sobel'))
        self.action_2_4_2.triggered.connect(partial(self.Grad,'scharr'))
        self.action_2_4_3.triggered.connect(partial(self.Grad,'laplacian'))
        self.action_2_5_1.triggered.connect(partial(self.Threshold, cv2.THRESH_BINARY))
        self.action_2_5_2.triggered.connect(partial(self.Threshold, cv2.THRESH_BINARY_INV))
        self.action_2_5_3.triggered.connect(partial(self.Threshold, cv2.THRESH_TRUNC))
        self.action_2_5_4.triggered.connect(partial(self.Threshold, cv2.THRESH_TOZERO))
        self.action_2_5_5.triggered.connect(partial(self.Threshold, cv2.THRESH_TOZERO_INV))
        self.action_2_5_6.triggered.connect(partial(self.Threshold, cv2.THRESH_BINARY + cv2.THRESH_OTSU))
        self.action_2_6_1.triggered.connect(self.Edge)
        self.action_2_7_1.triggered.connect(self.Contour)
        self.action_2_7_2.triggered.connect(self.Contour)
        self.action_2_7_3.triggered.connect(self.Contour)
        self.action_2_7_4.triggered.connect(self.Contour)
        self.action_3_1_1.triggered.connect(self.affine_Transform)
        self.action_3_1_2.triggered.connect(self.perspective_Transform)
        self.action_3_2_1.triggered.connect(self.convex_lens_effect)
        self.action_3_2_2.triggered.connect(self.concave_lens_effect)
        self.action_3_3_1.triggered.connect(self.sin_effecy)
        self.action_3_4_1.triggered.connect(self.xuan_effecy)
        self.action_3_5_1.triggered.connect(self.halfcircle_effecy)
        self.action_4_1_1.triggered.connect(self.imgchange_effecy)
        self.action_5_1_1.triggered.connect(self.select_foreground_by_roi)
        self.action_5_1_2.triggered.connect(self.Foreground_mask_selector)
        self.action_5_2_1.triggered.connect(self.select_background_by_roi)

        self.action_6_1_1.triggered.connect(self.text_Correction)
        self.action_6_2_1.triggered.connect(self.text_agumention)
        self.action_6_3_1.triggered.connect(self.text_Sharpen)
        self.action_6_4_1.triggered.connect(self.text_OCR)
        self.actioncomboclear.triggered.connect(self.clear_dock_widget)
        self.action_7_1_1.triggered.connect(self.tool_help)

        #图片存储
        self.image_history = []  # 用于保存图像历史记录
        self.current_image = None
        self.processed_image = None
        self.drawing = False
        self.graphicsView.mousePressEvent = self.on_mouse_press
        self.graphicsView.mouseMoveEvent = self.on_mouse_move
        self.is_draggable = False
        self.last_mouse_pos = None
        self.texting = False
        self.pixmap_item = QGraphicsPixmapItem()
        self.pixmap=None
        self.text_x=None

        self.text_y=None

    def VR(self):


        pTime = 0
        width, height = 640, 480
        frameR = 100
        smoothening = 8
        prev_x, prev_y = 0, 0
        curr_x, curr_y = 0, 0

        cap = cv2.VideoCapture(0)
        cap.set(3, width)
        cap.set(4, height)

        detector = ht.handDetector(maxHands=1)
        screen_width, screen_height = autopy.screen.size()

        while True:
            success, img = cap.read()
            img = detector.findHands(img)
            lmlist, bbox = detector.findPosition(img)

            if len(lmlist) != 0:
                x1, y1 = lmlist[8][1:]
                x2, y2 = lmlist[12][1:]

                fingers = detector.fingersUp()
                cv2.rectangle(img, (frameR, frameR), (width - frameR, height - frameR), (255, 0, 255), 2)

                if fingers[1] == 1 and fingers[2] == 0:
                    x3 = np.interp(x1, (frameR, width - frameR), (0, screen_width))
                    y3 = np.interp(y1, (frameR, height - frameR), (0, screen_height))

                    curr_x = prev_x + (x3 - prev_x) / smoothening
                    curr_y = prev_y + (y3 - prev_y) / smoothening

                    autopy.mouse.move(screen_width - curr_x, curr_y)
                    cv2.circle(img, (x1, y1), 7, (255, 0, 255), cv2.FILLED)
                    prev_x, prev_y = curr_x, curr_y

                if fingers[1] == 1 and fingers[2] == 1:
                    length, img, lineInfo = detector.findDistance(8, 12, img)

                    if length < 40:
                        cv2.circle(img, (lineInfo[4], lineInfo[5]), 15, (0, 255, 0), cv2.FILLED)
                        autopy.mouse.click()

            cTime = time.time()
            fps = 1 / (cTime - pTime)
            pTime = cTime
            cv2.putText(img, str(int(fps)), (20, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)
            cv2.imshow("Image", img)
            cv2.waitKey(1)




    def tool_help(self):
        help_img=cv2.imread("picture/help.png")


        self.update_img(help_img)

    def mouse_affine(self):
        original_image = self.current_image
        result_image = ag.mouse_Affine(original_image)


        self.update_img(result_image)

    def vignette(self):
        original_img=self.current_image
        result_img = ag.apply_vignette_filter(original_img)
        self.update_img(result_img)


    def knife(self):

        original_img = self.current_image
        result_img=ag.knife(original_img)
        self.update_img(result_img)

    def mask(self):
        # 读取输入图像

        # 选择矩形区域
        roi = cv2.selectROI("Select ROI", self.current_image)

        # 打马赛克并显示结果
        result_image = ag.apply_mosaic_to_roi(self.current_image.copy(), roi)
        cv2.imshow("Mosaic Result", result_image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.update_img(result_image)

    def draw(self):
        self.drawing=True

    def toggleMove(self):
        # 切换是否允许移动
        if self.is_draggable is False:
            self.is_draggable = True
        else:
            self.is_draggable = False




    def on_mouse_press(self, event):
        if event.buttons() == Qt.LeftButton and self.drawing:
            x, y = event.x(), event.y()
            print(x, y)
            black_color = (0, 0, 0)  # 黑色像素的颜色值
            # 在指定位置添加黑色像素
            #mask=np.zeros(self.current_image.shape)
            #print(mask.shape)
            #print(self.current_image.shape)
            self.current_image[y, x] = black_color
            self.update_img(self.current_image)
        if event.button() == Qt.LeftButton and self.is_draggable:

            self.last_mouse_pos = event.pos()
            print(event.pos())
        if event.button() == Qt.LeftButton and self.texting:
            self.text_x,self.text_y=event.x(), event.y()

    def on_mouse_move(self, event):


        x_coord = event.x()
        y_coord = event.y()
        # 格式化坐标信息到字符串
        text = f"{x_coord}, {y_coord} px"

        self.label_dock2_Location.setText(text)
        if event.buttons() == Qt.LeftButton and self.drawing:
            x, y = event.x(), event.y()
            print(x, y)
            black_color = (0, 0, 0)  # 黑色像素的颜色值
            # 定义一个范围，用于确定要绘制的像素位置
            radius = 5  # 可根据需要调整半径

            # 在指定位置及其周围的像素上绘制黑色像素
            for i in range(x - radius, x + radius + 1):
                for j in range(y - radius, y + radius + 1):
                    if 0 <= i < self.current_image.shape[1] and 0 <= j < self.current_image.shape[0]:
                        self.current_image[j, i] = black_color
            self.update_img(self.current_image)
        #self.update_img(self.current_image)
        if self.is_draggable and self.last_mouse_pos:
            delta = event.pos() - self.last_mouse_pos
            self.graphicsView.setGeometry(self.graphicsView.geometry().translated(delta.x(), delta.y()))
            self.last_mouse_pos = event.pos()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.menu_2.setTitle(_translate("MainWindow", "编辑"))
        self.menu_3.setTitle(_translate("MainWindow", "效果"))
        self.menu_4.setTitle(_translate("MainWindow", "转场"))
        self.menu_5.setTitle(_translate("MainWindow", "分割"))
        self.menu_6.setTitle(_translate("MainWindow", "文档"))
        self.menu_7.setTitle(_translate("MainWindow", "帮助"))
        self.menu_2_1.setTitle(_translate("MainWindow", "平滑处理"))
        self.menu_2_2.setTitle(_translate("MainWindow", "均衡化"))
        self.menu_2_3.setTitle(_translate("MainWindow", "形态学"))
        self.menu_2_4.setTitle(_translate("MainWindow", "图像梯度"))
        self.menu_2_5.setTitle(_translate("MainWindow", "阈值处理"))
        self.menu_2_6.setTitle(_translate("MainWindow", "边缘检测"))
        self.menu_2_7.setTitle(_translate("MainWindow", "轮廓检测"))
        self.menu_3_1.setTitle(_translate("MainWindow", "图像变换"))
        self.menu_3_2.setTitle(_translate("MainWindow", "透镜效果"))
        self.menu_3_3.setTitle(_translate("MainWindow", "波浪变换"))
        self.menu_3_4.setTitle(_translate("MainWindow", "漩涡效果"))
        self.menu_3_5.setTitle(_translate("MainWindow", "扇形变换"))

        self.menu_4_1.setTitle(_translate("MainWindow", "转场"))
        self.menu_5_1.setTitle(_translate("MainWindow", "前景提取"))
        self.menu_5_2.setTitle(_translate("MainWindow", "背景提取"))
        self.menu_6_1.setTitle(_translate("MainWindow", "矫正"))
        self.menu_6_2.setTitle(_translate("MainWindow", "扫描"))
        self.menu_6_3.setTitle(_translate("MainWindow", "增亮"))
        self.menu_6_4.setTitle(_translate("MainWindow", "识别"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionopen.setText(_translate("MainWindow", "open"))
        self.actionsave.setText(_translate("MainWindow", "save"))
        self.action_2_1.setText(_translate("MainWindow", "mohu"))
        self.menu_7_1.setTitle(_translate("MainWindow", "帮助"))

        self.action_tool_mouse.setText(_translate("MainWindow", "鼠标"))
        self.action_tool_bigger.setText(_translate("MainWindow", "放大"))
        self.action_tool_smaller.setText(_translate("MainWindow", "缩小"))
        self.action_tool_gray.setText(_translate("MainWindow", "VR"))

        self.action_tool_back.setText(_translate("MainWindow", "撤回"))
        self.action_2_1_1.setText(_translate("MainWindow", "高斯滤波"))
        self.action_2_1_2.setText(_translate("MainWindow", "均值滤波"))
        self.action_2_1_3.setText(_translate("MainWindow", "中值滤波"))
        self.actioncomboclear.setText(_translate("MainWindow", "清除"))
        self.action_2_2_1.setText(_translate("MainWindow", "R通道"))
        self.action_2_2_2.setText(_translate("MainWindow", "G通道"))
        self.action_2_2_3.setText(_translate("MainWindow", "B通道"))
        self.action_2_3_1.setText(_translate("MainWindow", "腐蚀操作"))
        self.action_2_3_2.setText(_translate("MainWindow", "膨胀操作"))
        self.action_2_3_3.setText(_translate("MainWindow", "开操作"))
        self.action_2_3_4.setText(_translate("MainWindow", "闭操作"))
        self.action_2_3_5.setText(_translate("MainWindow", "梯度操作"))
        self.action_2_3_6.setText(_translate("MainWindow", "顶帽操作"))
        self.action_2_3_7.setText(_translate("MainWindow", "黑帽操作"))
        self.action_2_4_1.setText(_translate("MainWindow", "Sobel算子"))
        self.action_2_4_2.setText(_translate("MainWindow", "Scharr算子"))
        self.action_2_4_3.setText(_translate("MainWindow", "Laplacian算子"))
        self.action_2_5_1.setText(_translate("MainWindow", "二进制阈值化"))
        self.action_2_5_2.setText(_translate("MainWindow", "反二进制阈值化"))
        self.action_2_5_3.setText(_translate("MainWindow", "截断阈值化"))
        self.action_2_5_4.setText(_translate("MainWindow", "阈值化为0"))
        self.action_2_5_5.setText(_translate("MainWindow", "反阈值化为0"))
        self.action_2_5_6.setText(_translate("MainWindow", "大津算法"))
        self.action_2_6_1.setText(_translate("MainWindow", "Canny法"))
        self.action_2_7_1.setText(_translate("MainWindow", "外轮廓"))
        self.action_2_7_2.setText(_translate("MainWindow", "轮廓列表"))
        self.action_2_7_3.setText(_translate("MainWindow", "外轮廓内孔"))
        self.action_2_7_4.setText(_translate("MainWindow", "轮廓等技树"))

        self.action_3_1_1.setText(_translate("MainWindow", "仿射变换"))
        self.action_3_1_2.setText(_translate("MainWindow", "透视变换"))
        self.action_3_2_1.setText(_translate("MainWindow", "凸透效果"))
        self.action_3_2_2.setText(_translate("MainWindow", "凹透效果"))
        self.action_3_3_1.setText(_translate("MainWindow", "正弦变换"))
        self.action_3_4_1.setText(_translate("MainWindow", "漩涡变换"))
        self.action_3_5_1.setText(_translate("MainWindow", "扇形映射"))


        self.action_4_1_1.setText(_translate("MainWindow", "图像转场"))
        self.action_5_1_1.setText(_translate("MainWindow", "画框"))
        self.action_5_1_2.setText(_translate("MainWindow", "交互"))
        self.action_5_2_1.setText(_translate("MainWindow", "画框"))
        self.action_5_2_2.setText(_translate("MainWindow", "交互"))
        self.action_6_1_1.setText(_translate("MainWindow", "文档矫正"))
        self.action_6_2_1.setText(_translate("MainWindow", "文字扫描"))
        self.action_6_3_1.setText(_translate("MainWindow", "图像锐化"))
        self.action_6_4_1.setText(_translate("MainWindow", "文字识别"))
        self.action_7_1_1.setText(_translate("MainWindow", "工具栏"))
        self.action_7_1_2.setText(_translate("MainWindow", "菜单栏"))


    def text_OCR(self):
        text = pytesseract.image_to_string(self.current_image)
        print(text)
    def text_Sharpen(self):
        original_img=self.current_image
        result_img=ag.adjust_brightness_and_sharpness(original_img)

        self.update_img(result_img)

    def text_agumention(self):
        original_image=self.current_image

        result_image=ag.text_augumention(original_image)
        self.update_img(result_image)

    def text_Correction(self):
        original_image=self.current_image
        result=ag.scan(original_image)
        self.update_img(result)

    def select_foreground_by_roi(self):
        img = self.current_image
        result = ag.select_foreground_by_roi(img)
        cv2.imshow('asdf', result)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.update_img(result)

    def select_background_by_roi(self):
        img = self.current_image
        result = ag.select_background_by_roi(img)
        cv2.imshow('asdf', result)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.update_img(result)


    def Foreground_mask_selector(self):
        img = self.current_image
        new_img = ag.Foreground_mask_selector(img).select()
        cv2.imshow('asdf', new_img)
        cv2.waitKey()
        cv2.destroyAllWindows()
        self.update_img(new_img)
    def imgchange_effecy(self):
        img1=self.current_image
        fname = QFileDialog.getOpenFileName(None, '打开图片', './', "Images (*.png *.jpg *.bmp)")
        if fname[0]:
            pixmap_2 = QPixmap(fname[0])
            img2 = ag.qimage2mat(pixmap_2)
            print('111')
            ag.apply_imgchange(img1,img2)


    def halfcircle_effecy(self):
        # Load an image
        image = self.current_image

        # Define center, start_angle, and end_angle for the sector mapping
        center = (image.shape[1] // 2, image.shape[0] // 2)
        start_angle = 10  # Starting angle of the sector in degrees
        end_angle = 50  # Ending angle of the sector in degrees

        # Initialize the inner and outer radii (you can change these values)
        inner_radius = 50
        outer_radius = min(center[0], center[1])

        # Create a window and trackbars for inner radius, outer radius, and end angle
        cv2.namedWindow('Sector Ring Mapped Image')
        cv2.createTrackbar('Inner Radius', 'Sector Ring Mapped Image', inner_radius, outer_radius, lambda x: None)
        cv2.createTrackbar('Outer Radius', 'Sector Ring Mapped Image', outer_radius, max(center[0], center[1]),
                           lambda x: None)
        cv2.createTrackbar('End Angle', 'Sector Ring Mapped Image', end_angle, 360, lambda x: None)

        while True:
            # Get the current values of the inner radius, outer radius, and end angle from the trackbars
            inner_radius = cv2.getTrackbarPos('Inner Radius', 'Sector Ring Mapped Image')
            outer_radius = cv2.getTrackbarPos('Outer Radius', 'Sector Ring Mapped Image')
            end_angle = cv2.getTrackbarPos('End Angle', 'Sector Ring Mapped Image')

            # Perform the sector ring mapping
            sector_ring_mapped_image = ag.sector_ring_mapping(image, center, inner_radius, outer_radius, start_angle,
                                                           end_angle)

            # Display the original and mapped images
            cv2.imshow('Original Image', image)
            cv2.imshow('Sector Ring Mapped Image', sector_ring_mapped_image)

            # Check for user input to adjust the start angle
            key = cv2.waitKey(1)
            if key == ord('q'):
                break

        cv2.destroyAllWindows()
        self.update_img(sector_ring_mapped_image)

    def xuan_effecy(self):


        original_image= self.current_image
        result_image=ag.apply_image_xuanwo(original_image)

        self.update_img(result_image)

    def sin_effecy(self):

        original_image = self.current_image
        result_image = ag.apply_image_transformations(original_image)

        cv2.imshow('Transformed Image', result_image)

        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.update_img(result_image)



    def concave_lens_effect(self):
        original_image = self.current_image
        result_image = ag.apply_concave_lens_effect(original_image)

        cv2.imshow('Transformed Image', result_image)

        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.update_img(result_image)

    def convex_lens_effect(self):
        original_image = self.current_image
        result_image = ag.apply_convex_lens_effect(original_image)

        cv2.imshow('Transformed Image', result_image)

        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.update_img(result_image)

    def perspective_Transform(self):
        original_image = self.current_image
        result_image = ag.perform_perspective_transformation(original_image)

        cv2.imwrite('output_image_with_alpha.png', result_image)

        cv2.imshow('Transformed Image', result_image)

        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.update_img(result_image)


    def affine_Transform(self):
        original_image = self.current_image
        result_image = ag.perform_affine_transformation(original_image)

        cv2.imwrite('output_image_with_alpha.png', result_image)

        cv2.imshow('Transformed Image', result_image)

        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.update_img(result_image)




    def ctext(self):
        original_image=self.current_image
        fname = QFileDialog.getOpenFileName(None, '打开图片', './', "Images (*.png *.jpg *.bmp)")
        if fname[0]:
            pixmap_2 = QPixmap(fname[0])
            img2 = ag.qimage2mat(pixmap_2)
            print('111')
            re = ag.insert_element_into_image(img2, original_image, output_path='./result.jpg')


        self.update_img(re)

    def text(self):
        if self.texting is False:
            self.texting = True
        else:
            self.texting = False

        self.dockWidget_9.setVisible(True)

        self.dock9_button1.clicked.connect(partial(self.apply_text))

    def big(self):
        self.graphicsView.scale(1.2, 1.2)

    def small(self):
        self.graphicsView.scale(0.8, 0.8)

    def zoomIn(self):

        #self.graphicsView.scale(1.2, 1.2)
        current_geometry = self.graphicsView.geometry()
        #print(current_geometry.width)
        new_geometry = current_geometry.adjusted(-10, -10, 10, 10)  # 增加一些尺寸
        # 获取 QGraphicsView 的大小
        #print(self.graphicsView.width)
        view_width = new_geometry.width()
        view_height = new_geometry.height()
        # 调整图像的大小以匹配 QGraphicsView
        #print(view_width)
        bigger_img = cv2.resize(self.current_image, (view_width, view_height))
        self.update_img(bigger_img)
        #self.graphicsView.setGeometry(new_geometry)


    def zoomOut(self):

        #self.graphicsView.scale(0.8, 0.8)

        # 缩小 GraphicsView 的尺寸
        current_geometry = self.graphicsView.geometry()
        new_geometry = current_geometry.adjusted(10, 10, -10, -10)  # 减小一些尺寸
        # 获取 QGraphicsView 的大小
        view_width = new_geometry.width()
        view_height = new_geometry.height()
        # 调整图像的大小以匹配 QGraphicsView
        smaller_img = cv2.resize(self.current_image, (view_width, view_height))
        self.update_img(smaller_img)




    def btn1_fun(self):
        self.stackedWidget1.setCurrentIndex(0)

    def btn2_fun(self):
        self.stackedWidget1.setCurrentIndex(1)

    def btn3_fun(self):
        self.stackedWidget1.setCurrentIndex(2)

    def get_pixmap_color(self, event):
        pixmap = self.label_color.pixmap()
        if pixmap:
            # 获取图片的像素颜色
            color = pixmap.toImage().pixelColor(event.pos())  # 使用事件的位置获取颜色
            print(f"Selected color from pixmap: {color.name()}")

    def update_img(self,img):
        # 更新当前图像
        self.current_image = img

        # 将处理后的图像保存到历史记录
        self.image_history.append(self.current_image.copy())

        pix = ag.matqimage(img)
        width = pix.width()
        height = pix.height()
        #print(width)
        self.label_dock2_Size.setText(f"{width} x {height} px")
        # 调整 QGraphicsView 的大小以适应图像大小
        self.graphicsView.setFixedSize(width, height)
        scene = QGraphicsScene(self.graphicsView)
        scene.setSceneRect(0, 0, width, height)
        scene.addPixmap(pix)
        self.graphicsView.setScene(scene)
        self.graphicsView.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)
    def open_img(self):
        fname = QFileDialog.getOpenFileName(None, '打开图片', './', "Images (*.png *.jpg *.bmp)")
        if fname[0]:
            self.pixmap = QPixmap(fname[0])
            width = self.pixmap.width()
            height = self.pixmap.height()
            # 调整 QGraphicsView 的大小以适应图像大小
            self.graphicsView.setFixedSize(width, height)
            scene = QGraphicsScene(self.graphicsView)
            scene.setSceneRect(0, 0, width, height)
            scene.addPixmap(self.pixmap)
            scene.addItem(self.pixmap_item)
            self.graphicsView.setScene(scene)
            self.graphicsView.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)
            self.current_image=ag.qimage2mat(self.pixmap)
            self.label_dock2_Size.setText(f"{width} x {height} px")
    def saveimage(self):
        if self.current_image is not None:
            fname, _ = QFileDialog.getSaveFileName(None, '保存图片', './', "Images (*.png *.jpg *.bmp)")
            if fname:
                cv2.imwrite(fname, self.current_image)
                print(f"图片已保存为 {fname}")

    def back_img(self):
        # 撤回上一个图像处理操作
        if len(self.image_history) > 0:
            self.current_image = self.image_history[-2]  # 获取最后一个元素
            self.image_history.pop()  # 弹出最后一个元素
            pix = ag.matqimage(self.current_image)
            width = pix.width()
            height = pix.height()

            # 调整 QGraphicsView 的大小以适应图像大小
            self.graphicsView.setFixedSize(width, height)
            scene = QGraphicsScene(self.graphicsView)
            scene.setSceneRect(0, 0, width, height)
            scene.addPixmap(pix)
            self.graphicsView.setScene(scene)
            self.graphicsView.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)
        else:
            self.current_image = None
    def Morph(self,op):
        self.dockWidget_4.setVisible(True)
        self.dock4_spin.valueChanged.connect(partial(self.apply_morph,op))
        self.dock4_combo.currentIndexChanged.connect(partial(self.apply_morph,op))

    def Grad(self,op):
        self.dockWidget_5.setVisible(True)
        self.dock5_spin.valueChanged.connect(partial(self.apply_grad,op))
        self.dock5_checkbox1.stateChanged.connect(partial(self.apply_grad,op))
        self.dock5_checkbox2.stateChanged.connect(partial(self.apply_grad,op))

    def Edge(self):
        self.dockWidget_7.setVisible(True)
        self.dock7_spin.valueChanged.connect(self.apply_edge)
        self.dock7_spin2.valueChanged.connect(self.apply_edge)

    def Equalize(self,kind):
        self.dockWidget_3.setVisible(True)
        self.dock3_checkbox1.stateChanged.connect(self.apply_equalize)
        self.dock3_checkbox2.stateChanged.connect(self.apply_equalize)
        self.dock3_checkbox3.stateChanged.connect(self.apply_equalize)

    def Contour(self):
        self.dockWidget_8.setVisible(True)

    def Threshold(self,op):
        self.dockWidget_6.setVisible(True)
        self.dock6_spin.valueChanged.connect(partial(self.apply_thresold,op))
        self.dock6_spin2.valueChanged.connect(partial(self.apply_thresold,op))

    def Filter_blur(self,kind):
        # 在 def 中执行高斯滤波和其他操作
        # 设置 QComboBox 和 QLabel 的可见性为 True，以便它们在需要时显示
        # 添加选项
        self.dockWidget.setVisible(True)
        self.kernel_size_spin.setMinimum(1)
        self.kernel_size_spin.setMaximum(30)
        self.kernel_size_spin.setSingleStep(2)
        self.kernel_size_spin.setValue(1)
        self.kernel_size_spin.setVisible(True)
        if kind == 'Gaussian':

            self.kernel_size_spin.valueChanged.connect(self.apply_gaussian_filter)
        if kind == 'mean':

            self.kernel_size_spin.valueChanged.connect(self.apply_mean_filter)

        if kind == 'median':

            self.kernel_size_spin.valueChanged.connect(self.apply_median_filter)
        '''
        self.kernel_size_combo.addItem("3x3")
        self.kernel_size_combo.addItem("5x5")
        self.kernel_size_combo.addItem("7x7")
        # 设置默认选项
        default_size = "5x5"  # 你可以将默认选项设置为你想要的值
        self.kernel_size_combo.setCurrentText(default_size)

        self.kernel_size_combo.setVisible(True)
        self.kernel_size_label.setVisible(True)
        # 连接信号和槽，当选择改变时调用 apply_gaussian_filter 函数
        self.kernel_size_combo.currentIndexChanged.connect(self.apply_gaussian_filter)
        '''
    def clear_dock_widget(self):

        self.kernel_size_combo.clear()





    def apply_text(self):

        input_text = self.dock9_text.toPlainText()
        painter = QPainter(self.pixmap)
        font = QtGui.QFont()
        font.setPointSize(24)
        painter.setFont(font)
        painter.setPen(QtGui.QColor(0, 0, 0))  # 文字颜色为黑色
        print(input_text)
        print(self.text_x)
        # 在指定位置绘制文字
        painter.drawText(self.text_x, self.text_y, input_text)

        # 结束绘制
        painter.end()
        self.current_image = ag.qimage2mat(self.pixmap)
        self.update_img(self.current_image)


    def apply_morph(self,op):
        kshape=self.dock4_combo.currentText()
        ksize=self.dock4_spin.value()
        if self.current_image is not None:

            morph_img=ag.Morph(self.current_image,op,kshape,ksize)

            self.update_img(morph_img)
        else:
            return

    def apply_edge(self):
        min = self.dock7_spin.value()
        max = self.dock7_spin2.value()
        if self.current_image is not None:
            edge_img=ag.Edge(self.current_image,min,max)

            self.update_img(edge_img)
        else:
            return

    def apply_thresold(self,op):
        min=self.dock6_spin.value()
        max=self.dock6_spin2.value()

        if self.current_image is not None:
            thre_img=ag.Thresold(self.current_image,op,min,max)

            self.update_img(thre_img)
        else:
            return


    def apply_grad(self,op):
        dx = 1 if self.dock5_checkbox1.isChecked() else 0
        dy = 1 if self.dock5_checkbox2.isChecked() else 0

        selected_size = self.dock5_spin.value()

        if self.current_image is not None:
            grad_img=ag.Grad(self.current_image,op,selected_size,dx,dy)

            self.update_img(grad_img)
        else:
            return


    def apply_equalize(self):
        if self.dock3_checkbox1.isChecked():
            equalize_img=ag.Equalize(self.current_image,'R')

            self.update_img(equalize_img)
        if self.dock3_checkbox2.isChecked() :
            equalize_img=ag.Equalize(self.current_image,'G')

            self.update_img(equalize_img)
        if self.dock3_checkbox3.isChecked() :
            equalize_img=ag.Equalize(self.current_image,'B')

            self.update_img(equalize_img)
        else:
            return
    def apply_gaussian_filter(self):
        selected_size = self.kernel_size_spin.value()


        if self.current_image is not None:

            blur_gaussian_img = ag.gaussian_blur(self.current_image, selected_size)

            self.update_img(blur_gaussian_img)
        else:
            return
    def apply_mean_filter(self):
        selected_size = self.kernel_size_spin.value()
        if self.current_image is not None:

            blur_mean_img = ag.mean_blur(self.current_image, selected_size)

            self.update_img(blur_mean_img)
        else:
            return
    def apply_median_filter(self):
        selected_size = self.kernel_size_spin.value()
        if self.current_image is not None:
            print("median")
            blur_median_img = ag.median_blur(self.current_image, selected_size)

            self.update_img(blur_median_img)
        else:
            return
    def gray_img(self):
        if self.current_image is not None:
            # 进行灰度值处理

            gray_image = ag.gray_picture(self.current_image)
            # 更新当前图像
            self.update_img(gray_image)
        else:
            return

    def flip_l(self):
        if self.current_image is not None:

            flip_image = ag.flip_picture(self.current_image,0)
            # 更新当前图像
            self.update_img(flip_image)
        else:
            return

    def flip_r(self):
        if self.current_image is not None:

            flip_image = ag.flip_picture(self.current_image,1)
            # 更新当前图像
            self.update_img(flip_image)
        else:
            return

from PyQt5.QtWidgets import QApplication, QMainWindow
import sys
# ... 省略你的所有TableWidget子类的定义 ...
def main():
    # 创建Qt应用程序对象
    app = QApplication(sys.argv)
    app.setStyleSheet(open('./styleSheet.qss', encoding='utf-8').read())
    # 创建主窗口
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()

    ui.setupUi(MainWindow)
    # 设置任务栏中的运行图标
    icon = QtGui.QIcon("picture/ICON.jpg")  # 将 "path_to_icon.png" 替换为你的图标文件路径
    MainWindow.setWindowIcon(icon)
    # 显示主窗口
    MainWindow.show()

    # 运行应用程序
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()

